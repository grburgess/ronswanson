{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a9d8410a",
   "metadata": {},
   "source": [
    "# Intro\n",
    "\n",
    "So you need to build a table model? 3ML via astromodels provides you with nice facilities to accomplish this task. But often, we need to interface with computationally expensive simulations and require many runs of these simulations. This is a very generic task and Ron Swanson wants to make things as simple as possible for you. Making things complicated is annoying.\n",
    "\n",
    "![alt text](https://raw.githubusercontent.com/grburgess/ronswanson/master/docs/media/mad.jpg)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32bc0e99",
   "metadata": {},
   "source": [
    "## Example with a Band function\n",
    "\n",
    "Let's say we want to make a table model from a Band function.\n",
    "\n",
    "We pick a parameter grid and a grid of energies for our simulation. We can enter these in a YAML file:\n",
    "\n",
    "```yaml\n",
    "alpha:\n",
    "  custom: no\n",
    "  vmin: -1\n",
    "  vmax: 0\n",
    "  scale: \"linear\"\n",
    "  n_points: 10\n",
    "\n",
    "beta:\n",
    "  custom: no\n",
    "  vmin: -3\n",
    "  vmax: -2\n",
    "  scale: \"linear\"\n",
    "  n_points: 10\n",
    "\n",
    "epeak:\n",
    "  custom: yes\n",
    "  values: [50., 69.74 , 97.29, 135.72, 189.32, 264.097, 368.4, 513.9, 716.87, 1000.]\n",
    "\n",
    "energy_grid:\n",
    "  custom: no\n",
    "  vmin: 10\n",
    "  vmax: 1000\n",
    "  scale: \"log\"\n",
    "  n_points: 50\n",
    "\n",
    "\n",
    "```\n",
    "\n",
    "As can be seen, we can specify the parameter/energy grids ourselves, or we can specify their ranges and let it be done for us.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc3a2df6",
   "metadata": {},
   "source": [
    "### The Simulation class\n",
    "\n",
    "Now we need to make a class for the simulation. We will inherit from the simulation class and specify a `_run_call` function that tells the program how to run the simulation for a given set of parameters. This function **must** return an array of photon fluxes for the given energies.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b81af1ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-10T13:24:46.936248Z",
     "iopub.status.busy": "2022-07-10T13:24:46.935943Z",
     "iopub.status.idle": "2022-07-10T13:24:51.280937Z",
     "shell.execute_reply": "2022-07-10T13:24:51.279501Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m The naima package is not available. Models that depend on it will not be available\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m The GSL library or the pygsl wrapper cannot be loaded. Models that depend on it will not be available.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m The ebltable package is not available. Models that depend on it will not be available\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "from typing import Dict\n",
    "\n",
    "import numpy as np\n",
    "from astromodels import Band\n",
    "import ronswanson as dukesilver\n",
    "\n",
    "\n",
    "class BandSimulation(dukesilver.Simulation):\n",
    "    def __init__(\n",
    "        self,\n",
    "        simulation_id: int,\n",
    "        parameter_set: Dict[str, float],\n",
    "        energy_grid: np.ndarray,\n",
    "        out_file: str,\n",
    "    ) -> None:\n",
    "        super().__init__(simulation_id, parameter_set, energy_grid, out_file)\n",
    "\n",
    "    def _run_call(self) -> np.ndarray:\n",
    "\n",
    "        b = Band(\n",
    "            K=1,\n",
    "            alpha=self._parameter_set[\"alpha\"],\n",
    "            beta=self._parameter_set[\"beta\"],\n",
    "            xp=self._parameter_set[\"epeak\"],\n",
    "        )\n",
    "\n",
    "        return b(self._energy_grid)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93a3e874",
   "metadata": {},
   "source": [
    "Now we need to tell the simulation builder a few things so it can construct our files for us. We have stored this YAML file in the repo itself. You should use your own!\n",
    "\n",
    "The `SimulationBuilder` class takes a parameter grid, the name of the file that will be created, the import line for the custom simulation class, the number of cores and nodes to execute on."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dd33c5a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-10T13:24:51.286594Z",
     "iopub.status.busy": "2022-07-10T13:24:51.286027Z",
     "iopub.status.idle": "2022-07-10T13:24:51.299675Z",
     "shell.execute_reply": "2022-07-10T13:24:51.298755Z"
    }
   },
   "outputs": [],
   "source": [
    "from ronswanson.utils.package_data import get_path_of_data_file\n",
    "\n",
    "\n",
    "file_name = get_path_of_data_file(\"test_params.yml\")\n",
    "\n",
    "\n",
    "# create a parameter grid from our file\n",
    "pg = dukesilver.ParameterGrid.from_yaml(file_name)\n",
    "\n",
    "# create a simulation builder\n",
    "sb = dukesilver.SimulationBuilder(\n",
    "    pg,\n",
    "    \"database.h5\",\n",
    "    \"from ronswanson.band_simulation import BandSimulation as Simulation\",\n",
    "    n_cores=8,\n",
    "    n_nodes=None,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "726ab5e1",
   "metadata": {},
   "source": [
    "Now a python file will be written to the disk which you can run to create your simulation runs. we can have a look at the file.\n",
    "\n",
    "```\n",
    "from ronswanson.band_simulation import BandSimulation as Simulation\n",
    "from joblib import Parallel, delayed\n",
    "from ronswanson import ParameterGrid\n",
    "\n",
    "pg = ParameterGrid.from_yaml('/Users/jburgess/coding/projects/ronswanson/parameters.yml')\n",
    "def func(i):\n",
    "\tparams = pg.at_index(i)\n",
    "\tsimulation = Simulation(i, params, pg.energy_grid.grid,'/Users/jburgess/coding/projects/ronswanson/database.h5')\n",
    "\tsimulation.run()\n",
    "\n",
    "iteration = [i for i in range(0, pg.n_points)]\n",
    "\n",
    "Parallel(n_jobs=8)(delayed(func)(i) for i in iteration)\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "316dfe8d",
   "metadata": {},
   "source": [
    "Now this simply uses `joblib` to farm out the iterations over the parameter combinations. If iterations are to also be divided across HPC nodes, the python script will be modified and an associated `SLURM` script will be generated.\n",
    "\n",
    "\n",
    "### The Database\n",
    "\n",
    "\n",
    "\n",
    "Upon running the script, an HDF5 database of the runs is created which contains all the information needed to build a table model in `3ML`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d12ccea9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-10T13:24:51.303843Z",
     "iopub.status.busy": "2022-07-10T13:24:51.303587Z",
     "iopub.status.idle": "2022-07-10T13:24:51.307519Z",
     "shell.execute_reply": "2022-07-10T13:24:51.306442Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from ronswanson.utils.package_data import get_path_of_data_file\n",
    "from ronswanson import Database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3e6f60bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-10T13:24:51.311760Z",
     "iopub.status.busy": "2022-07-10T13:24:51.311152Z",
     "iopub.status.idle": "2022-07-10T13:24:51.894172Z",
     "shell.execute_reply": "2022-07-10T13:24:51.893201Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('alpha',\n",
       "              array([-1.        , -0.77777778, -0.55555556, -0.33333333, -0.11111111,\n",
       "                      0.11111111,  0.33333333,  0.55555556,  0.77777778,  1.        ])),\n",
       "             ('beta',\n",
       "              array([-3.        , -2.88888889, -2.77777778, -2.66666667, -2.55555556,\n",
       "                     -2.44444444, -2.33333333, -2.22222222, -2.11111111, -2.        ])),\n",
       "             ('epeak',\n",
       "              array([  50.        ,   69.7475397 ,   97.29438588,  135.72088083,\n",
       "                      189.32395047,  264.09759503,  368.40314986,  513.9042664 ,\n",
       "                      716.87116444, 1000.        ]))])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db = Database.from_file(get_path_of_data_file(\"test_database.h5\"))\n",
    "db.parameter_ranges"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12a5f9b4",
   "metadata": {},
   "source": [
    "Now we can use the database to construct and save a table model for `3ML`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "67708222",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-10T13:24:51.899405Z",
     "iopub.status.busy": "2022-07-10T13:24:51.899121Z",
     "iopub.status.idle": "2022-07-10T13:24:52.584231Z",
     "shell.execute_reply": "2022-07-10T13:24:52.583250Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m Energy unit is not a Quantity instance, so units has not been provided. Using keV.\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: a new model for 3ML</li>\n",
       "\n",
       "<li>formula: n.a.</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>K: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: None</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>scale: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: None</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: None</li>\n",
       "\n",
       "<li>min_value: -1.0</li>\n",
       "\n",
       "<li>max_value: 1.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>beta: \n",
       "<ul>\n",
       "\n",
       "<li>value: -2.5</li>\n",
       "\n",
       "<li>desc: None</li>\n",
       "\n",
       "<li>min_value: -3.0</li>\n",
       "\n",
       "<li>max_value: -2.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.25</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>epeak: \n",
       "<ul>\n",
       "\n",
       "<li>value: 226.71077275</li>\n",
       "\n",
       "<li>desc: None</li>\n",
       "\n",
       "<li>min_value: 50.0</li>\n",
       "\n",
       "<li>max_value: 1000.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 22.671077275000002</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: a new model for 3ML\n",
       "  * formula: n.a.\n",
       "  * parameters:\n",
       "    * K:\n",
       "      * value: 1.0\n",
       "      * desc: None\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * scale:\n",
       "      * value: 1.0\n",
       "      * desc: None\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * alpha:\n",
       "      * value: 0.0\n",
       "      * desc: None\n",
       "      * min_value: -1.0\n",
       "      * max_value: 1.0\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * beta:\n",
       "      * value: -2.5\n",
       "      * desc: None\n",
       "      * min_value: -3.0\n",
       "      * max_value: -2.0\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.25\n",
       "      * free: true\n",
       "    * epeak:\n",
       "      * value: 226.71077275\n",
       "      * desc: None\n",
       "      * min_value: 50.0\n",
       "      * max_value: 1000.0\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 22.671077275000002\n",
       "      * free: true"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table_model = db.to_3ml(\"my_model\", \"a new model for 3ML\")\n",
    "table_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a23b07d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-10T13:24:52.589853Z",
     "iopub.status.busy": "2022-07-10T13:24:52.589523Z",
     "iopub.status.idle": "2022-07-10T13:24:55.016785Z",
     "shell.execute_reply": "2022-07-10T13:24:55.015548Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from astromodels import Band\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2d1a5f5",
   "metadata": {},
   "source": [
    "We can compare our table model with the Band function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e39c8a30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-10T13:24:55.022245Z",
     "iopub.status.busy": "2022-07-10T13:24:55.021171Z",
     "iopub.status.idle": "2022-07-10T13:24:58.125159Z",
     "shell.execute_reply": "2022-07-10T13:24:58.124216Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fd88a3a9040>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ene = np.geomspace(10, 1000, 100)\n",
    "\n",
    "b = Band()\n",
    "b.alpha = -0.6\n",
    "b.beta = -2.5\n",
    "b.xp = 250\n",
    "b.K = 1.05\n",
    "\n",
    "table_model.alpha = -0.6\n",
    "table_model.beta = -2.5\n",
    "table_model.epeak = 250\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.loglog(\n",
    "    ene, ene**2 * table_model(ene), color='#33FFC4', lw=3, label=\"table\"\n",
    ")\n",
    "ax.loglog(ene, ene**2 * b(ene), color='#C989FB', lw=3, label=\"band\")\n",
    "\n",
    "ax.set(xlabel=\"energy\", ylabel=\"vFv\")\n",
    "\n",
    "ax.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c9c7bb0",
   "metadata": {},
   "source": [
    "Great! That was way easier than programming everything yourself.\n",
    "\n",
    "![alt text](https://raw.githubusercontent.com/grburgess/ronswanson/master/docs/media/happy.jpeg)\n",
    "\n",
    "\n",
    "Suppose we did not want to use all the values in the parameter ranges we have simulated. Bigger interpolation tables take up memory when fitting.\n",
    "\n",
    "We can select a subset of the parameter ranges when building the table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2ee1afdd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-10T13:24:58.129673Z",
     "iopub.status.busy": "2022-07-10T13:24:58.129308Z",
     "iopub.status.idle": "2022-07-10T13:24:58.365603Z",
     "shell.execute_reply": "2022-07-10T13:24:58.364553Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m Energy unit is not a Quantity instance, so units has not been provided. Using keV.\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: a new model for 3ML</li>\n",
       "\n",
       "<li>formula: n.a.</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>K: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: None</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>scale: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: None</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: -0.5555555555555556</li>\n",
       "\n",
       "<li>desc: None</li>\n",
       "\n",
       "<li>min_value: -1.0</li>\n",
       "\n",
       "<li>max_value: -0.11111111111111116</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.05555555555555556</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>beta: \n",
       "<ul>\n",
       "\n",
       "<li>value: -2.5</li>\n",
       "\n",
       "<li>desc: None</li>\n",
       "\n",
       "<li>min_value: -3.0</li>\n",
       "\n",
       "<li>max_value: -2.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.25</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>epeak: \n",
       "<ul>\n",
       "\n",
       "<li>value: 368.40314986</li>\n",
       "\n",
       "<li>desc: None</li>\n",
       "\n",
       "<li>min_value: 264.09759503</li>\n",
       "\n",
       "<li>max_value: 513.9042664</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 36.840314986</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: a new model for 3ML\n",
       "  * formula: n.a.\n",
       "  * parameters:\n",
       "    * K:\n",
       "      * value: 1.0\n",
       "      * desc: None\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * scale:\n",
       "      * value: 1.0\n",
       "      * desc: None\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * alpha:\n",
       "      * value: -0.5555555555555556\n",
       "      * desc: None\n",
       "      * min_value: -1.0\n",
       "      * max_value: -0.11111111111111116\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.05555555555555556\n",
       "      * free: true\n",
       "    * beta:\n",
       "      * value: -2.5\n",
       "      * desc: None\n",
       "      * min_value: -3.0\n",
       "      * max_value: -2.0\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.25\n",
       "      * free: true\n",
       "    * epeak:\n",
       "      * value: 368.40314986\n",
       "      * desc: None\n",
       "      * min_value: 264.09759503\n",
       "      * max_value: 513.9042664\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 36.840314986\n",
       "      * free: true"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selection = {}\n",
    "selection['alpha'] = dict(vmax=0)\n",
    "selection['epeak'] = dict(vmin=200, vmax=700)\n",
    "\n",
    "table_model_small = db.to_3ml(\n",
    "    \"my_model_small\", \"a new model for 3ML\", **selection\n",
    ")\n",
    "table_model_small"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67f7dded",
   "metadata": {},
   "source": [
    "Awesome! Now go enjoy your weekend.\n",
    "\n",
    "![alt text](https://raw.githubusercontent.com/grburgess/ronswanson/master/docs/media/enjoy.jpg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5baa55c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
